{"ast":null,"code":"var _jsxFileName = \"D:\\\\Pluralsight\\\\react-hooks-learn\\\\src\\\\ImageToggleOnScroll.js\";\nvar __jsx = React.createElement;\nimport React, { useRef, useEffect, useState } from 'react';\n\nconst ImageTogglerOnScroll = ({\n  primaryImg,\n  secondaryImg\n}) => {\n  const imageRef = useRef(null);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(true);\n  useEffect(() => {\n    window.addEventListener('scroll', scrollHandler);\n    setInView(isInView());\n    setIsLoading(false);\n    return () => {\n      window.removeEventListener('scroll', scrollHandler);\n    };\n  }, [isLoading]);\n  const {\n    0: inView,\n    1: setInView\n  } = useState(false);\n\n  const isInView = () => {\n    if (imageRef.current) {\n      const rect = imageRef.current.getBoundingClientRect();\n      return rect.top >= 0 && rect.bottom <= window.innerHeight;\n    }\n\n    return false;\n  };\n\n  const scrollHandler = () => {\n    setInView(() => {\n      return isInView();\n    });\n  };\n\n  return isLoading ? null : __jsx(\"img\", {\n    src: inView ? secondaryImg : primaryImg,\n    alt: \"\",\n    ref: imageRef,\n    width: \"200\",\n    height: \"200\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  });\n};\n\nexport default ImageTogglerOnScroll;","map":{"version":3,"sources":["D:\\Pluralsight\\react-hooks-learn\\src\\ImageToggleOnScroll.js"],"names":["React","useRef","useEffect","useState","ImageTogglerOnScroll","primaryImg","secondaryImg","imageRef","isLoading","setIsLoading","window","addEventListener","scrollHandler","setInView","isInView","removeEventListener","inView","current","rect","getBoundingClientRect","top","bottom","innerHeight"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;;AAEA,MAAMC,oBAAoB,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA;AAAd,CAAD,KAAkC;AAC7D,QAAMC,QAAQ,GAAGN,MAAM,CAAC,IAAD,CAAvB;AACA,QAAM;AAAA,OAACO,SAAD;AAAA,OAAYC;AAAZ,MAA4BN,QAAQ,CAAC,IAAD,CAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCC,aAAlC;AACAC,IAAAA,SAAS,CAACC,QAAQ,EAAT,CAAT;AACAL,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,WAAO,MAAM;AACXC,MAAAA,MAAM,CAACK,mBAAP,CAA2B,QAA3B,EAAqCH,aAArC;AACD,KAFD;AAGD,GAPQ,EAON,CAACJ,SAAD,CAPM,CAAT;AASA,QAAM;AAAA,OAACQ,MAAD;AAAA,OAASH;AAAT,MAAsBV,QAAQ,CAAC,KAAD,CAApC;;AAEA,QAAMW,QAAQ,GAAG,MAAM;AACrB,QAAIP,QAAQ,CAACU,OAAb,EAAsB;AACpB,YAAMC,IAAI,GAAGX,QAAQ,CAACU,OAAT,CAAiBE,qBAAjB,EAAb;AACA,aAAOD,IAAI,CAACE,GAAL,IAAY,CAAZ,IAAiBF,IAAI,CAACG,MAAL,IAAeX,MAAM,CAACY,WAA9C;AACD;;AACD,WAAO,KAAP;AACD,GAND;;AAQA,QAAMV,aAAa,GAAG,MAAM;AAC1BC,IAAAA,SAAS,CAAC,MAAM;AACd,aAAOC,QAAQ,EAAf;AACD,KAFQ,CAAT;AAGD,GAJD;;AAMA,SAAON,SAAS,GAAG,IAAH,GACd;AACE,IAAA,GAAG,EAAEQ,MAAM,GAAGV,YAAH,GAAkBD,UAD/B;AAEE,IAAA,GAAG,EAAC,EAFN;AAGE,IAAA,GAAG,EAAEE,QAHP;AAIE,IAAA,KAAK,EAAC,KAJR;AAKE,IAAA,MAAM,EAAC,KALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AASD,CAtCD;;AAwCA,eAAeH,oBAAf","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\n\nconst ImageTogglerOnScroll = ({ primaryImg, secondaryImg }) => {\n  const imageRef = useRef(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    window.addEventListener('scroll', scrollHandler);\n    setInView(isInView());\n    setIsLoading(false);\n    return () => {\n      window.removeEventListener('scroll', scrollHandler);\n    };\n  }, [isLoading]);\n\n  const [inView, setInView] = useState(false);\n\n  const isInView = () => {\n    if (imageRef.current) {\n      const rect = imageRef.current.getBoundingClientRect();\n      return rect.top >= 0 && rect.bottom <= window.innerHeight;\n    }\n    return false;\n  };\n\n  const scrollHandler = () => {\n    setInView(() => {\n      return isInView();\n    });\n  };\n\n  return isLoading ? null : (\n    <img\n      src={inView ? secondaryImg : primaryImg}\n      alt=''\n      ref={imageRef}\n      width='200'\n      height='200'\n    />\n  );\n};\n\nexport default ImageTogglerOnScroll;\n"]},"metadata":{},"sourceType":"module"}